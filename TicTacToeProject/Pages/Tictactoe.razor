@page "/tictactoe"
using TicTacToeGame
@inject NavigationManager uriHelper;

@code {
    TicTacToeGame tictactoe = new TicTacToeGame();
    //IMPORTANT: @CODE only runs on init or by calling a function inside it 
}

@if (tictactoe.PlayerChosenShape.Equals(Shape.None))
{
    <h1>Ready to tic tac toe?</h1>

    <p>Then choose a shape</p>
    <div>
        <img width="64" src="https://upload.wikimedia.org/wikipedia/commons/f/f8/X_G.png"
        alt="Letter X representing cross shape">
        <button class="btn-primary" @onclick="tictactoe.ChooseCross">Choose Cross</button>
    </div>
    <div>
        <img width="64" src="https://www.vhv.rs/file/max/20/201990_red-circle-png.png" alt="circle shape">
        <button class="btn-primary" @onclick="tictactoe.ChooseCircle">Choose Circle</button>
    </div>
}
else
{
    <div style="position: fixed;">
        @if (!tictactoe.WinMessage.Equals(String.Empty))
        {
            <p class="winMessage">@tictactoe.WinMessage</p>
        }
        <p>Click on one of the squares and then click on the confirm button</p> <br>

        @for (int y = 0; y < 3; y++)
        {

            for (int x = 0; x < 3; x++)
            {
                switch (tictactoe.GameMatrix[y, x])
                {
                    case Shape.Cross:
                        <button class="equalButton" disabled><img class="shape" width="64"
            src="https://upload.wikimedia.org/wikipedia/commons/f/f8/X_G.png"></button>
                        break;
                    case Shape.Circle:
                        <button class="equalButton" disabled><img class="shape" width="64"
            src="https://www.vhv.rs/file/max/20/201990_red-circle-png.png"></button>
                        break;
                    case Shape.None:
                        var i = x;
                        var j = y;
                        @*Vars above are needed since the lambda function below only uses the last index of x and y instead of the current
                            one (3, 3) instead of (0, 0), (0, 1), (0, 2)...*@
                        int currentPos = j * 3 + i;
                        <button class="equalButton" @onclick="@(() => tictactoe.SetGivenPos(@currentPos))"><img class="shape" width="64"
            src="https://pixy.org/src/474/thumbs350/4742987.jpg"></button>
                        break;
                }
            }

            <br>
        }

        @if (tictactoe.IsPositionAvailablePlayer())
        {
            <button class="btn-primary" @onclick="tictactoe.TicTacToeRunTime">Confirm</button>
        } 
        <br>
        <br>
        <a href="../"><button class="btn btn-danger">Go Back</button></a>
        <button class="btn btn-danger" @onclick="RefreshPage">Play Again</button>
    </div>
}

@code{
    public void RefreshPage()
    {
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
}
